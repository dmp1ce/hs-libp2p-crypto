{-# LANGUAGE BangPatterns, DeriveDataTypeable, DeriveGeneric, FlexibleInstances, MultiParamTypeClasses #-}
{-# OPTIONS_GHC  -fno-warn-unused-imports #-}
module Crypto.LibP2P.Protobuf (protoInfo, fileDescriptorProto) where
import Prelude ((+), (/))
import qualified Prelude as Prelude'
import qualified Data.Typeable as Prelude'
import qualified GHC.Generics as Prelude'
import qualified Data.Data as Prelude'
import qualified Text.ProtocolBuffers.Header as P'
import Text.DescriptorProtos.FileDescriptorProto (FileDescriptorProto)
import Text.ProtocolBuffers.Reflections (ProtoInfo)
import qualified Text.ProtocolBuffers.WireMessage as P' (wireGet,getFromBS)

protoInfo :: ProtoInfo
protoInfo
 = Prelude'.read
    "ProtoInfo {protoMod = ProtoName {protobufName = FIName \".Crypto.LibP2P.Protobuf\", haskellPrefix = [], parentModule = [MName \"Crypto\",MName \"LibP2P\"], baseName = MName \"Protobuf\"}, protoFilePath = [\"Crypto\",\"LibP2P\",\"Protobuf.hs\"], protoSource = \"LibP2P-Crypto.proto\", extensionKeys = fromList [], messages = [DescriptorInfo {descName = ProtoName {protobufName = FIName \".Crypto.LibP2P.Protobuf.PublicKey\", haskellPrefix = [], parentModule = [MName \"Crypto\",MName \"LibP2P\",MName \"Protobuf\"], baseName = MName \"PublicKey\"}, descFilePath = [\"Crypto\",\"LibP2P\",\"Protobuf\",\"PublicKey.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Crypto.LibP2P.Protobuf.PublicKey.Type\", haskellPrefix' = [], parentModule' = [MName \"Crypto\",MName \"LibP2P\",MName \"Protobuf\",MName \"PublicKey\"], baseName' = FName \"type'\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 8}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 14}, typeName = Just (ProtoName {protobufName = FIName \".Crypto.LibP2P.Protobuf.KeyType\", haskellPrefix = [], parentModule = [MName \"Crypto\",MName \"LibP2P\",MName \"Protobuf\"], baseName = MName \"KeyType\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Crypto.LibP2P.Protobuf.PublicKey.Data\", haskellPrefix' = [], parentModule' = [MName \"Crypto\",MName \"LibP2P\",MName \"Protobuf\",MName \"PublicKey\"], baseName' = FName \"data'\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 18}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 12}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], descOneofs = fromList [], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False, makeLenses = False},DescriptorInfo {descName = ProtoName {protobufName = FIName \".Crypto.LibP2P.Protobuf.PrivateKey\", haskellPrefix = [], parentModule = [MName \"Crypto\",MName \"LibP2P\",MName \"Protobuf\"], baseName = MName \"PrivateKey\"}, descFilePath = [\"Crypto\",\"LibP2P\",\"Protobuf\",\"PrivateKey.hs\"], isGroup = False, fields = fromList [FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Crypto.LibP2P.Protobuf.PrivateKey.Type\", haskellPrefix' = [], parentModule' = [MName \"Crypto\",MName \"LibP2P\",MName \"Protobuf\",MName \"PrivateKey\"], baseName' = FName \"type'\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 1}, wireTag = WireTag {getWireTag = 8}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 14}, typeName = Just (ProtoName {protobufName = FIName \".Crypto.LibP2P.Protobuf.KeyType\", haskellPrefix = [], parentModule = [MName \"Crypto\",MName \"LibP2P\",MName \"Protobuf\"], baseName = MName \"KeyType\"}), hsRawDefault = Nothing, hsDefault = Nothing},FieldInfo {fieldName = ProtoFName {protobufName' = FIName \".Crypto.LibP2P.Protobuf.PrivateKey.Data\", haskellPrefix' = [], parentModule' = [MName \"Crypto\",MName \"LibP2P\",MName \"Protobuf\",MName \"PrivateKey\"], baseName' = FName \"data'\", baseNamePrefix' = \"\"}, fieldNumber = FieldId {getFieldId = 2}, wireTag = WireTag {getWireTag = 18}, packedTag = Nothing, wireTagLength = 1, isPacked = False, isRequired = True, canRepeat = False, mightPack = False, typeCode = FieldType {getFieldType = 12}, typeName = Nothing, hsRawDefault = Nothing, hsDefault = Nothing}], descOneofs = fromList [], keys = fromList [], extRanges = [], knownKeys = fromList [], storeUnknown = False, lazyFields = False, makeLenses = False}], enums = [EnumInfo {enumName = ProtoName {protobufName = FIName \".Crypto.LibP2P.Protobuf.KeyType\", haskellPrefix = [], parentModule = [MName \"Crypto\",MName \"LibP2P\",MName \"Protobuf\"], baseName = MName \"KeyType\"}, enumFilePath = [\"Crypto\",\"LibP2P\",\"Protobuf\",\"KeyType.hs\"], enumValues = [(EnumCode {getEnumCode = 0},\"RSA\"),(EnumCode {getEnumCode = 1},\"Ed25519\"),(EnumCode {getEnumCode = 2},\"Secp256k1\")]}], oneofs = [], knownKeyMap = fromList []}"

fileDescriptorProto :: FileDescriptorProto
fileDescriptorProto
 = P'.getFromBS (P'.wireGet 11)
    (P'.pack
      "\242\SOH\n\DC3LibP2P-Crypto.proto\DC2\SYNCrypto.LibP2P.Protobuf\"H\n\tPublicKey\DC2-\n\EOTType\CAN\SOH \STX(\SO2\US.Crypto.LibP2P.Protobuf.KeyType\DC2\f\n\EOTData\CAN\STX \STX(\f\"I\n\nPrivateKey\DC2-\n\EOTType\CAN\SOH \STX(\SO2\US.Crypto.LibP2P.Protobuf.KeyType\DC2\f\n\EOTData\CAN\STX \STX(\f*.\n\aKeyType\DC2\a\n\ETXRSA\DLE\NUL\DC2\v\n\aEd25519\DLE\SOH\DC2\r\n\tSecp256k1\DLE\STX")